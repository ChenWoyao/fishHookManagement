{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport Cookies from 'js-cookie';\nexport function serialize(obj, prefix) {\n  var str = [];\n\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      var k = prefix ? \"\".concat(prefix, \"[\").concat(key, \"]\") : p;\n      var v = obj[key];\n      str.push(_typeof(v) === 'object' ? serialize(v, k) : \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(v)));\n    }\n  }\n\n  return str.join('&');\n}\nexport function getToken(TokenKey) {\n  return Cookies.get(TokenKey);\n}\nexport function setToken(TokenKey, token) {\n  return Cookies.set(TokenKey, token);\n}\nexport function removeToken(TokenKey) {\n  return Cookies.remove(TokenKey);\n}\n/**\n * @export\n * @param {*} date    Date类型\n * @param {*} cFormat 任何你想要的格式\n * @returns\n */\n\nexport function parseDate(date, cFormat) {\n  var format = cFormat || 'y-m-d h:i:s';\n  var formatObj = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay()\n  };\n  var time_str = format.replace(/([ymdhisa])+/g, function (result, key) {\n    var value = formatObj[key];\n\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value];\n    }\n\n    return value.toString().padStart(2, '0');\n  });\n  return time_str;\n}\n/**\n * 搜索框搜索输入。只需用户最后一次输入完，再发送请求\n * 手机号、邮箱验证输入检测\n * 窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染\n * @param {*} func\n * @param {*} delay\n * @param {*} immediate\n * @returns\n */\n\nexport var debounce = function debounce(func, delay, immediate) {\n  var later = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (!later && immediate) {\n      func.apply(void 0, args);\n    }\n\n    later && clearTimeout(later);\n    later = setTimeout.apply(void 0, [func, delay].concat(args));\n  };\n}; // 函数节流：\n\n/**\n * 滚动加载，加载更多或滚到底部监听\n * 谷歌搜索框，搜索联想功能\n * 高频点击提交，表单重复提交\n * @param {*} func\n * @param {*} delay\n * @returns\n */\n\nexport var throttle = function throttle(func, delay) {\n  var later = null;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (later) return;\n    later = setTimeout(function () {\n      func.apply(void 0, args);\n      later = null;\n    }, delay);\n  };\n};\n/**\n * eventEmitter实现\n */\n\nexport var EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter(events) {\n    _classCallCheck(this, EventEmitter);\n\n    this.events = events || {};\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"subscribe\",\n    value: function subscribe(name, cb) {\n      var _this = this;\n\n      this.events[name] || (this.events[name] = []).push(cb);\n      return {\n        unsubscribe: function unsubscribe() {\n          _this.events[name] && _this.events[name].splice(_this.events[name].indexOf(cb) >>> 0, 1);\n        }\n      };\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(name) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      (this.events[name] || []).forEach(function (fn) {\n        return fn.apply(void 0, args);\n      });\n    }\n  }]);\n\n  return EventEmitter;\n}();\n/**\n * compose实现\n * compose (widthData(), widhtLogger())(Component)\n*/\n\nexport var compose = function compose() {\n  for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    fns[_key4] = arguments[_key4];\n  }\n\n  return function (Component) {\n    return fns.reduceRight(function (Component, fn) {\n      return fn(Component);\n    }, Component);\n  };\n};\n/**\n * 函数柯里化\n */\n\nexport var curring = function curring(func) {\n  return function () {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    if (func.length <= args.length) {\n      return fns.apply(void 0, args);\n    }\n\n    return function () {\n      for (var _len6 = arguments.length, args2 = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args2[_key6] = arguments[_key6];\n      }\n\n      return curring(func).apply(void 0, args.concat(args2));\n    };\n  };\n};\n/**\n * 获取本月有多少天\n */\n\nexport var getCurrentMonthDays = function getCurrentMonthDays() {\n  var date = new Date();\n  var month = date.getMonth() + 1;\n  var year = date.getFullYear();\n  return new Date(year, month, 0).getDate();\n};\n/**\n * 创建num个[min, max]区间的随机值\n * @param {个数} num\n * @param {最小值} min\n * @param {最大值} max\n * @returns\n */\n\nexport var createRandomNums = function createRandomNums(num, min, max) {\n  var result = [];\n\n  for (var i = 0; i < num; i++) {\n    var random = Math.random();\n    var space = max - min;\n    result.push(Math.ceil(space * random) + min);\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}